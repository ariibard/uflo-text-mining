---
format:
  revealjs:
    echo: true
    theme: custom.scss
    code-line-numbers: true
embed-resources: true
---

# Fuentes de datos textuales

## Objetivo de la clase

::: incremental
-   Aprender a consumir APIs utilizando CURL y R.
-   Descargar y trabajar con subt√≠tulos de YouTube.
:::

# APIs

## ¬øQu√© es una API?

> ‚Äúinterfaz de programaci√≥n de aplicaciones‚Äù.

Es como un contrato de servicio entre dos aplicaciones, mediante solicitudes y respuestas.

‚ö†Ô∏è Siempre hay que revisar la documentaci√≥n

## ¬øC√≥mo funciona?

Su arquitectura funciona en t√©rminos de **cliente** y servidor.

*La aplicaci√≥n que env√≠a la solicitud se llama cliente, y la que env√≠a la respuesta se llama servidor.*

## APIs ya integradas a R

::::: columns
::: {.column width="70%"}
Existen APIS que ya estan integradas en R como `spotifyr`, `twitter`, `googledrive`, `ggmaps` (google maps).

Para este ejemplo vamos a trabajar con la **API de spotify**
:::

::: {.column width="30%"}
![](https://www.emubands.com/es/wp-content/uploads/sites/2/2018/02/Spotify_logo-1024x1024.png){width="374"}
:::
:::::

## Librer√≠as üì¶

```{r}
#| code-line-numbers: "2"

library(tidyverse) 
library(spotifyr)  # Trabajar con la API de spotify
library(rjson)     # Lectura de archivo json
library(gt) # Para hacer tablas lindas
```

## Credenciales

Las credenciales son claves de autenticaci√≥n que permiten acceder a servicios a trav√©s de una API. Generalmente, constan de un `client ID` y un `client secret`. Estas credenciales son necesarias para verificar la identidad del usuario y garantizar un acceso seguro a los datos.

Guardamos las credenciales en un **.json**

``` r
{
  "SPOTIFY_CLIENT_ID" : "SPOTIFY_CLIENT_ID",
  "SPOTIFY_CLIENT_SECRET" : "SPOTIFY_CLIENT_SECRET"
}
```

## Credenciales

Se realiza la lectura de las credenciales mediante la funci√≥n fromJSON(). Luego, se setean como variables de entorno:

```{r}
credentials <- fromJSON(file = "credentials.json")

Sys.setenv(SPOTIFY_CLIENT_ID = credentials$SPOTIFY_CLIENT_ID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = credentials$SPOTIFY_CLIENT_SECRET)
access_token <- get_spotify_access_token()

```

## Autenticaci√≥n

Se utiliza la funci√≥n get_spotify_access_token() del paquete {spotifyr} üì¶ para autenticarse a la API:

```{r}
access_token <- get_spotify_access_token()
```

## ¬øFunciona?

Para verificar que la autenticaci√≥n haya sido exitosa, se realiza una consulta de las canciones de shakira.

Para ello vamos a necesitar el ID de la artista

![](images/id_shakira.png)

## Informaci√≥n de los albumes

Usamos la funci√≥n `get_artist_albums()` para traer informaci√≥n de sus discos

```{r}

id_shakira <- "0EmeFodog0BfCgMzAIvKQp"
canciones_shakira <- get_artist_albums(id = id_shakira)

```

## Resultado <img src="https://media.giphy.com/media/ObNTw8Uzwy6KQ/giphy.gif" width="30px"/>

üñáÔ∏è[M√°s informaci√≥n sobre las funciones de spotifyr](https://github.com/charlie86/spotifyr)

```{r}

head(canciones_shakira) |> 
  select(name, release_date,type) |> 
  gt() 
```

# Volvemos en 10 minutos

![](https://i.pinimg.com/originals/10/d2/05/10d205b912352788a8b7116a43c00230.gif){fig-align="center" style="border-radius: 100%;"}

# CURL

`CURL` es una herramienta para realizar peticiones HTTP. En R, se puede utilizar a trav√©s del paquete [`curl`](https://www.rdocumentation.org/packages/curl/versions/5.2.1)

Sirve para obtener datos de APIs p√∫blicas y privadas

## Star Wars

::::: columns
::: {.column width="40%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Star_Wars_Logo.svg/375px-Star_Wars_Logo.svg.png)
:::

::: {.column width="60%"}
Existen varias APIs p√∫blicas. Vamos a trabajar con la de <https://www.swapi.tech/>

El formato de consulta a una API es un link:

> https://www.swapi.tech/api/people/1
:::
:::::

## ¬øC√≥mo y qu√© informaci√≥n trae la API?

Lo primero que hay que hacer es buscar la [documentaci√≥n](https://www.swapi.tech/documentation) de la API

![](images/doc_star_wars.png)

## Handle

Un handle en curl es un objeto que almacena la configuraci√≥n de una conexi√≥n HTTP.

B√°sicamente, es una estructura que te permite personalizar y reutilizar una petici√≥n a una API o servidor web.

```{r}
#| code-line-numbers: "3"

library(curl)

h <- new_handle()
handle_setheaders(h, "User-Agent" = "Mozilla/5.0")

```

## Handle

`handle_setheaders()` es una funci√≥n que se usa para **agregar o modificar los encabezados (headers)** en una solicitud HTTP.

**`User-Agent" = "Mozilla/5.0"`** establece en el encabezado al agente como "Mozilla/5.0", lo que *hace que la solicitud parezca provenir de un **navegador web*** en lugar de un script automatizado.

```{r}
#| code-line-numbers: "2"

h <- new_handle()
handle_setheaders(h, "User-Agent" = "Mozilla/5.0")

```

## Personajes

La funci√≥n `curl_fetch_memory(url, handle = h)` en R se utiliza para realizar una solicitud HTTP a la URL especificada y almacenar la respuesta directamente en la memoria

Ejemplo: **Luke** -\> ID = 1

```{r}

url <- "https://www.swapi.tech/api/people/1"
response <- curl_fetch_memory(url, h)


```

## Personajes

Transformamos el request a json para poder observarlo mejor

```{r results='hide'}
#| code-line-numbers: "1"
json_text <- rawToChar(response$content)
data <- fromJSON(json_text)

# Observo resultados
print(data$result$properties)
```

## Personajes

Transformamos el request a json para poder observarlo mejor

```{r results='hide'}
#| code-line-numbers: "2"
json_text <- rawToChar(response$content)
data <- fromJSON(json_text)

# Observo resultados
print(data$result$properties)
```

## Personajes

Transformamos el request a json para poder observarlo mejor

```{r}
#| code-line-numbers: "5"
json_text <- rawToChar(response$content)
data <- fromJSON(json_text)

# Observo resultados
print(data$result$properties)
```

## Convierto a un data frame

```{r}

personaje <- data$result$properties

# Lo convierto a un dataframe:
data.frame(
  nombre = personaje$name,
  altura = as.numeric(personaje$height),
  peso = as.numeric(personaje$mass),
  color_pelo = personaje$hair_color,
  color_ojos = personaje$eye_color,
  a√±o_nacimiento = personaje$birth_year,
  genero = personaje$gender,
  planeta_origen = personaje$homeworld
) |> 
  gt()
```

## ¬øY si quiero la informaci√≥n de todos los personajes?

```{r}
url <- "https://www.swapi.tech/api/people"
response <- curl_fetch_memory(url, h)
json_text <- rawToChar(response$content)
data <- fromJSON(json_text)

data.frame(data$result)
```

## Armamos un bucle

```{r}

df_personajes <- data.frame()

# Me quedo con un vector con los IDs de los personajes
ids <- sapply(data$result, function(x) x$uid)


for (i in ids) {
 
  # Repetimos los pasos anteriores para consolidar la data 
 url <- paste0("https://www.swapi.tech/api/people/",i)
 response <- curl_fetch_memory(url, h)
 json_text <- rawToChar(response$content)
 data <- fromJSON(json_text)

# Extraigo solo los resultados
 personaje <- data$result$properties


 df <- data.frame(
  nombre = personaje$name,
  altura = as.numeric(personaje$height),
  peso = as.numeric(personaje$mass),
  color_pelo = personaje$hair_color,
  color_ojos = personaje$eye_color,
  a√±o_nacimiento = personaje$birth_year,
  genero = personaje$gender,
  planeta_origen = personaje$homeworld
)
 
 df_personajes <- df_personajes |> 
   bind_rows(df)

}
```

## Resultado <img src="https://media.giphy.com/media/ObNTw8Uzwy6KQ/giphy.gif" width="30px"/>

```{r echo = FALSE}
df_personajes |> 
  gt()
```

# Volvemos en 10 minutos

![](https://i.pinimg.com/originals/10/d2/05/10d205b912352788a8b7116a43c00230.gif){fig-align="center" style="border-radius: 100%;"}

# Subt√≠tulos

![](https://upload.wikimedia.org/wikipedia/commons/e/ef/Youtube_logo.png){fig-align="center" width="126"}

# Librer√≠as üì¶

``` r
library(youtubecaption)
library(reticulate)
```

## Descargamos

Vamos a descargar los subtitulos de una [entrevista](https://www.youtube.com/watch?v=TfW5qAajtWw) a Ca7riel y Paco amoroso. Usamos `get_caption()` para descargar los subtituls en espa√±ol de la entrevista

``` r

link <- "https://www.youtube.com/watch?v=TfW5qAajtWw"
df_subtitulos<- get_caption(url = link, language = "es")
```

## Resultado <img src="https://media.giphy.com/media/ObNTw8Uzwy6KQ/giphy.gif" width="30px"/>

```{r include=FALSE}
df_subtitulos <- readRDS("subtitulos.rds")
```

```{r}
df_subtitulos |> 
  gt()

```

## ¬øY si quiero todo en una celda?

```{r}
df_subtitulos |> 
  summarise(texto = paste(text, collapse = " ")) |> 
  gt()
```

# PDFs

## üìÑ ¬øSe puede analizar documentos en PDF?

S√≠, pero hay que considerar c√≥mo est√° almacenado el texto:

::: incremental
-   ‚úÖ PDFs con texto digital (f√°cil de extraer)

-   ‚ö†Ô∏è PDFs con im√°genes escaneadas (requieren procesamiento OCR)
:::

## Usar texto de PDFs

Vamos a usar las [Actas de la dictadura 1971 - 1973](https://www.argentina.gob.ar/defensa/archivos-abiertos/proyectos-de-desclasificacion-1/actas-de-la-dictadura-1971-1973-0) del **Archivo Hist√≥rico del Ministerio de Defensa de la Naci√≥n**

::::: columns
::: {.column width="50%"}
<br> - Son documentos escaneados

-   Con un proceso de OCR
:::

::: {.column width="50%"}
![](images/actas.png)
:::
:::::

## ¬øQu√© es el reconocimiento √≥ptico de caracteres (OCR)?

OCR (Optical Character Recognition) es una tecnolog√≠a que convierte im√°genes de texto en texto editable y legible por m√°quinas.

`üí° ¬øC√≥mo funciona?`

::: incremental
-   Escaneo del documento üñ®Ô∏è

-   Detecci√≥n de caracteres üîç

-   Conversi√≥n a texto digital üíæ

üéØ Hoy en d√≠a, la mayor√≠a de los esc√°neres incluyen OCR autom√°ticamente.

üìå Si un documento no tiene OCR, es necesario aplicarlo antes de analizarlo.
:::

## Practica

vamos a utilizar la librer√≠a `pdftools` para descargar el texto dentro del pdf.

```{r}
library(tidytext)  # Para hacer el conteo de palabras
library(stopwords) # Para traernos las palabras a eliminar
text <- pdftools::pdf_text(pdf = "https://www.argentina.gob.ar/sites/default/files/actas-tomo-i-71.pdf")
# Observamos
head(text)

```

## Limpiamos un poco

```{r}
text_df <- tibble(
  linea = 1:length(text),
  contenido = map_chr(text, ~ .x %>%
                      str_squish() %>%             
                      str_replace_all("\\f", " ")  
  )
)

text_df %>% slice(1:10)

```

## Palabras m√°s mencionadas

```{r}
stopwords_es <- stopwords(language = "es", source = "snowball")  

tokens <- text_df %>%
  unnest_tokens(word, contenido) %>%
  filter(!word %in% stopwords_es ) |> 
  filter(nchar(word)>2)

tokens %>%
  count(word, sort = TRUE) %>%
  slice(1:10) |> 
  gt()
```

## Palabras m√°s mencionadas

‚ö†Ô∏è `¬øQu√© observamos?` Para mejorar nuestros an√°lisis, necesitamos limpiar mejor el texto (por ejemplo, eliminando palabras irrelevantes o normalizando t√©rminos). Vamos a trabajar en eso en las pr√≥ximas clases.

üí° Pero mientras tanto‚Ä¶ `¬øQu√© otros an√°lisis podr√≠amos hacer con estos datos?` ü§î

# Repaso

En esta clase vimos

-   C√≥mo consumir APIs a trav√©s de librer√≠as de R y CURL

-   Descargar subtitulos de youtube

-   Trabajar con PDFs

**De yapa:** [¬øC√≥mo extraer tablas de un PDF?](https://rpubs.com/Fr3ddy/561713)
